<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git | 常用命令</title>
      <link href="/2021/01/27/git-shi-yong-ming-ling/"/>
      <url>/2021/01/27/git-shi-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h4 id="1、git初始化仓库"><a href="#1、git初始化仓库" class="headerlink" title="1、git初始化仓库"></a>1、git初始化仓库</h4><pre><code>   git init  创建一个.git目录，跟踪管理版本</code></pre><h4 id="2、-git-添加文件"><a href="#2、-git-添加文件" class="headerlink" title="2、 git 添加文件"></a>2、 git 添加文件</h4><pre><code> git add xxx.xxx 添加文件到暂缓存区里 git add .  添加目录下所有文件</code></pre><h4 id="3、git提交"><a href="#3、git提交" class="headerlink" title="3、git提交"></a>3、git提交</h4><pre><code>  git commit -m  &quot;提交文字说明&quot;</code></pre><h4 id="4、查看提交状态"><a href="#4、查看提交状态" class="headerlink" title="4、查看提交状态"></a>4、查看提交状态</h4><pre><code> git status</code></pre><h4 id="5、查看文件修改内容"><a href="#5、查看文件修改内容" class="headerlink" title="5、查看文件修改内容"></a>5、查看文件修改内容</h4><pre><code>git diff xxx.xxx (具体文件名称) </code></pre><h4 id="6、查看历史记录"><a href="#6、查看历史记录" class="headerlink" title="6、查看历史记录"></a>6、查看历史记录</h4><pre><code>get log git log -n(n表示前N条)</code></pre><blockquote><ul><li>如果不带任何参数，它会列出所有历史记录，最近的排在最上方，显示提交对象的哈希值，作者、提交日期、和提交说明。如果记录过多，则按Page Up、Page Down、↓、↑来控制显示；按q退出历史记录列表。</li><li>如果不想向上面那样全部显示，可以选择显示前N条。</li></ul></blockquote><pre><code>如两天前的提交历史：git log --since=2.days如指定作者为&quot;BeginMan&quot;的所有提交:$ git log --author=BeginMan如指定关键字为“init”的所有提交：$ git log --grep=init如指定提交者为&quot;Jack&quot;的所有提交：$ git log --committer=Jack注意作者与提交者的关系：作者是程序的修改者，提交者是代码提交人。</code></pre><p>如指定2天前，作者为“BeginMan”的提交含有关键字’init’的前2条记录：</p><blockquote><p>git log –since=2.days –author=BeginMan –grep=init -2</p></blockquote><p>查看某次commit做了哪些修改</p><pre><code>  git log                       #查看commit的历史  git show &lt;commit-hash-id&gt;     #查看某次commit的修改内容</code></pre><h4 id="7、获取版本号"><a href="#7、获取版本号" class="headerlink" title="7、获取版本号"></a>7、获取版本号</h4><pre><code>  git reflog</code></pre><h4 id="8、版本回退"><a href="#8、版本回退" class="headerlink" title="8、版本回退"></a>8、版本回退</h4><pre><code>  git reset --hard HEAD^ 回退上一个版本  git reset --hard HEAD^^ 回退上上个版本  git reset --hard HEAD~n 回退前n个版本  git reset --hard xxxxxx # 回退到某个版本回退点之前的所有信息。 (输入版本号)  git reset --hard origin/master    # 将本地的状态回退到和远程的一样   git  reset  xxxxxx  # 回退到指定版本(输入版本号)</code></pre><h4 id="9、关联远程仓库"><a href="#9、关联远程仓库" class="headerlink" title="9、关联远程仓库"></a>9、关联远程仓库</h4><pre><code>  git remote add origin xxx (xxx为github/码云/其他仓库的项目地址)</code></pre><h4 id="10、从仓库更新代码"><a href="#10、从仓库更新代码" class="headerlink" title="10、从仓库更新代码"></a>10、从仓库更新代码</h4><pre><code>  git pull  git pull origin</code></pre><p>将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</p><blockquote><p>git pull origin master:brantest<br>如果远程分支是与当前分支合并，则冒号后面的部分可以省略。<br>git pull origin master</p></blockquote><h4 id="11、推送到远程库"><a href="#11、推送到远程库" class="headerlink" title="11、推送到远程库"></a>11、推送到远程库</h4><pre><code>  git push -u origin master  git push  git push --all origin</code></pre><blockquote><ul><li>(1)、 git push -u origin master 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机，这样后面就可以不加任何参数使用git push，不带任何参数的git push，默认只推送当前分支，这叫做simple方式，还有一种matching方式，会推送所有有对应的远程分支的本地分支， Git 2.0之前默认使用matching，现在改为simple方式,如果想更改设置，可以使用git config命令。git config –global push.default matching OR git config –global push.default simple；可以使用git config -l 查看配置</li><li>(2)、 git push –all origin 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</li><li>(3)、 git push –force origin git push的时候需要本地先git pull更新到跟服务器版本一致，如果本地版本库比远程服务器上的低，那么一般会提示你git pull更新，如果一定要提交，那么可以使用这个命令。</li><li>(4)、 git push origin –tags //git push 的时候不会推送分支，如果一定要推送标签的话那么可以使用这个命令</li></ul></blockquote><h4 id="12、克隆远程仓库"><a href="#12、克隆远程仓库" class="headerlink" title="12、克隆远程仓库"></a>12、克隆远程仓库</h4><pre><code>  git clone 链接</code></pre><h4 id="13、操作远程仓库"><a href="#13、操作远程仓库" class="headerlink" title="13、操作远程仓库"></a>13、操作远程仓库</h4><pre><code>　1.git remote 不带参数，列出已经存在的远程分支　2.git remote -v | --verbose 列出详细信息，在每一个名字后面列出其远程url，此时， -v 选项(译注:此为 –verbose 的简写,取首字母),显示对应的克隆地址。　3.git remote add url   添加一个远程仓库</code></pre><h4 id="14、分支"><a href="#14、分支" class="headerlink" title="14、分支"></a>14、分支</h4><pre><code>  git checkout -b dev 创建分支   git branch 查看当前分支  git checkout master 切换到分支master  git merge dev 把master分支合并到dev  git branch xx 创建分支  git branch -d xx 删除分支xx</code></pre><p>以上只是罗列比较常用的命令，如果需要查看更详细的内容，大家可以去<a href="https://www.runoob.com/git/git-create-repository.html" target="_blank" rel="noopener">菜鸟教程</a>的git教程学习，里面详细列举了git的所有使用方式。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> git </tag>
            
            <tag> 命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript中数据类型那些可能会中招的细节</title>
      <link href="/2021/01/27/javascript/javascript-shu-ju-lei-xing-na-xie-ke-neng-hui-zhong-zhao-de-xi-jie/"/>
      <url>/2021/01/27/javascript/javascript-shu-ju-lei-xing-na-xie-ke-neng-hui-zhong-zhao-de-xi-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Javascript的数据类型对于大家来说一点都不默认，主要基本数据局类型和引用数据类型，都是入门必学的知识点，而且在日常开发中，频繁使用。大家是否都掌握其中的一些细节呢？下面我们就详细探讨一下。</p><h3 id="一、number类型注意事项"><a href="#一、number类型注意事项" class="headerlink" title="一、number类型注意事项"></a>一、number类型注意事项</h3><p>number类型包括：正数、负数、0、小数、NaN</p><blockquote><p>NaN：意思是not a number 不是一个有效数字，但是它是属于number类型的</p></blockquote><h4 id="1-和-和-的区别"><a href="#1-和-和-的区别" class="headerlink" title="(1) = 和 == 和 ===的区别"></a>(1) = 和 == 和 ===的区别</h4><ul><li>= 是赋值</li><li>== 是判断左右两边的值是否相等(非严格判断，只要字面相等则相等)</li><li>=== 是判断左右两边是否相等,严格判断(包含数据类型,类型和字面相等才相等)</li></ul><h4 id="2-NaN"><a href="#2-NaN" class="headerlink" title="(2) NaN"></a>(2) NaN</h4><ul><li>NaN 和 NaN 是不相等的,NaN == NaN返回的是false</li><li>isNaN();检测一个值不是有效数字的命题是否成立，是有效数字则返回false，不是有效数字返回的才是true</li></ul><blockquote><p>isNaN() 如果检测的值不是number类型，浏览器会默认把值转换为number类型，然后在判断是否为有效数字</p></blockquote><pre><code> 例如：      console.log(isNaN(&quot;123&quot;))  // 打印结果是 true 步骤:     1、首先把&quot;123&quot;转换成number类型的,使用Number()转换方法    2、然后判断number类型的值是否满足isNaN的条件</code></pre><blockquote><ul><li>Number()方法 强制将其他数据类型转为number类型(强制数据类型转换)</li></ul></blockquote><pre><code>  Number()方法 强制将其他数据类型转为number类型，  要求：如果是字符串，字符串中一定都需要是数字才可以转换  例如：Number(&quot;12&quot;)返回的结果是12，Number(&quot;12px&quot;)返回的结果就是NaN</code></pre><blockquote><ul><li>非强制数据类型转换 parseInt()/ parseFloat()</li></ul></blockquote><pre><code>  parseInt: 从左到右，一个个字符查找，把是数字的转为有效数字，中途如果遇到了一个非有效数字，就不在继续查找了  parseFloat: 和上面一样，可以多识别一个小数点。  例如：parseInt(&#39;12px&#39;)的值为 12       parseFloat(&#39;12.5px&#39;)的值为 12.5</code></pre><h3 id="二、数据类型的转换规则"><a href="#二、数据类型的转换规则" class="headerlink" title="二、数据类型的转换规则"></a>二、数据类型的转换规则</h3><blockquote><p>常用的boolean转换符号</p></blockquote><ul><li><strong>!</strong>  一个感叹号是取反，首先将值转化为布尔类型的值，然后取反</li><li><strong>!!</strong>  两个感叹号是将其他的数据类型转换为  boolean 类型，相当于Boolean()</li></ul><h4 id="转换规则："><a href="#转换规则：" class="headerlink" title="转换规则："></a>转换规则：</h4><h5 id="1、如果只有一个值，判断这个值是真还是假，遵循：只有-0-NaN-“”-null-undefined-这五个是假，其余的都是真"><a href="#1、如果只有一个值，判断这个值是真还是假，遵循：只有-0-NaN-“”-null-undefined-这五个是假，其余的都是真" class="headerlink" title="1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN “” null undefined 这五个是假，其余的都是真"></a>1、如果只有一个值，判断这个值是真还是假，遵循：只有 0 NaN “” null undefined 这五个是假，其余的都是真</h5><pre><code>例如：    console.log(!3)  // false    console.log(![]) // false    console.log(!{}) // false    console.log(!null) // true    console.log(!0) // true    console.log(!undefined) //true    console.log(!&quot;&quot;)) //true</code></pre><blockquote><p><strong>注意：</strong> 此处 数字0才为假，如果是字符串的’0’,同样为真</p></blockquote><pre><code>例如：  if(0){    console.log(&quot;为真&quot;)  }else{    console.log(&quot;为假&quot;)  }  if(&#39;0&#39;){     console.log(&quot;为真&quot;)  }else{     console.log(&quot;为假&quot;)  }  第一个输出 为假，第二个输出 为真</code></pre><h5 id="2、如果是两个值比较是否相等，遵循这个规则："><a href="#2、如果是两个值比较是否相等，遵循这个规则：" class="headerlink" title="2、如果是两个值比较是否相等，遵循这个规则："></a>2、如果是两个值比较是否相等，遵循这个规则：</h5><p>val1 == val2 两个值可能不是同一数据类型的，如果是 == 比较的话，会进行默认的数据类型转换</p><ul><li>1)、对象 == 对象，永远不相等</li><li>2)、对象 == 字符串  现将对象转换为字符串(调用toString的方法)，然后在进行比较</li></ul><pre><code>  [] 转换为字符串 &quot;&quot;  {} 转换为字符串 &quot;[object Object]&quot;   所以:  [] == &quot;&quot; 为 true        {} == &quot;&quot; 为 false</code></pre><ul><li>3)、对象 == 布尔类型  对象先转为字符串(toString)，然后把字符串转换为数字(Number),布尔类型也转换为数字(true是1 false 是0)，最后让两个数字比较</li></ul><pre><code>    例如：        console.log([] == false) // 为 true        解析：首先 []转为字符串&quot;&quot;,然后字符串转为数字类型number，Number(&quot;&quot;)结果为0，false        转为数字类型，Number(false) 结果也为0，所以 [] == false, 就解析成了 0与0的比较，所以相等，        返回true</code></pre><ul><li>4)、对象 == 数字 对象先转为字符串(toString)，然后把字符串转换为数字(Number)</li><li>5)、数字 == 布尔 布尔类型转换为数字</li><li>6)、数字 == 字符串，字符串转换为数字</li></ul><pre><code>  例如：5 == &#39;5&#39; // 为 true</code></pre><ul><li>7)、字符串 == 布尔  都转换为数字</li><li>8)、null === undefined 结果是true</li></ul><pre><code>    console.log(null == undefined) // true</code></pre><ul><li>9)、null和undefined 和其他任何数据类型都不相等</li></ul><pre><code> console.log(null == 0) // false console.log(undefined == 0) // false</code></pre><h5 id="3、除了-是比较，-也是比较-绝对比较-，如果数据类型不一样肯定不相等"><a href="#3、除了-是比较，-也是比较-绝对比较-，如果数据类型不一样肯定不相等" class="headerlink" title="3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等"></a>3、除了== 是比较，===也是比较(绝对比较)，如果数据类型不一样肯定不相等</h5><pre><code>  例如：      console.log(0 == false) // true      console.log(0 === fasle) // false      console.log(5 == &quot;5&quot;) // true      console.log(5 === &quot;5&quot;) // false      console.log(null == undefined) // true      console.log(null === undefined) // false</code></pre><h3 id="三、typeof-数据类型检测"><a href="#三、typeof-数据类型检测" class="headerlink" title="三、typeof(数据类型检测)"></a>三、typeof(数据类型检测)</h3><blockquote><p>typeof 用来检测数据类型的，用法：typeof + 要检查的值,<br>返回一个字符串，包含了数据类型的字符( “number”,”string”,”boolean”,”undefined”,”function”,”object”)</p></blockquote><ul><li><strong>typeof null</strong> 返回的结果是 <strong>“object”</strong></li><li>typeof undefined 返回的结果是 “undefined”</li></ul><blockquote><p>虽然null 和 undefined 同为number数据类型，但是通过typeof检测的值不是number，而且也不相同。</p></blockquote><ul><li>typeof null 结果是 “object”</li><li>typeof [] 结果是 “object”</li></ul><blockquote><p>注意： 同为对象数据类型的 数组、正则、对象的检测类型都是”object”</p></blockquote><hr><blockquote><p><strong>typeof 局限性</strong>：不能具体的检查object下细分的类型</p></blockquote><pre><code>  console.log(typeof typeof typeof typeof []) // &quot;string&quot;  此处打印的是&quot;string&quot;</code></pre><blockquote><p>tip：因为typeof 返回的值就是一个字符串，如果用到了两个以及两个以上的typeof 返回的都是 “string”类型</p></blockquote><h3 id="四、基本数据类型和引用数据类型的本质区别"><a href="#四、基本数据类型和引用数据类型的本质区别" class="headerlink" title="四、基本数据类型和引用数据类型的本质区别"></a>四、基本数据类型和引用数据类型的本质区别</h3><p>例子：</p><pre><code>情景一:    var num1 = 12;    var num2 = num1;    num2++;    console.log(num1);情景二:    var obj1 = {&quot;name&quot;:&quot;张三&quot;};    var obj2 = obj1;    obj2.name = &quot;李四&quot;;    console.log(obj1.name);    情景一打印的值为 12, 情景二打印的值为 &quot;李四&quot;</code></pre><blockquote><p>分析：基本数据类型的值是具体的值，此处的var num2=num1;就是将num1的值 12给num2，此时num2和num1的值同为12，但是和num1的num2的值互不相关，所以不论num2怎么变，num1都是12，都不会改变。引用数据类型，存储的是数据内存的地址，var obj1 = {“name”:”张三”} 是开辟一个空间来存放{“name”:”张三”}值，然后将obj1指向存储值的地址，此时，var obj2 = obj1,就是将obj1指向内存空间的地址赋值给obj2，两个都指向同一个内存地址，对应的同一个值。所以后面obj2更改内存空间里面name的值后，obj1的值也会改变。</p></blockquote><h3 id="写到最后"><a href="#写到最后" class="headerlink" title="写到最后"></a>写到最后</h3><p>重新回顾基础的知识，发现以前很懵懂的知识似乎瞬间明白了许多，比如上述的引用数据类型指向的是内存空间的地址，相赋值操作后，操作赋值后的值会影响原有的值的结果。所以才有了日常生活中经常使用的深拷贝和浅拷贝，就是为了规避改变两个值互相影响的情况；以前都最顾着自己快速的去上手做项目，学习框架的内容，却忽视了这些最为基本的东西。当基础掌握的足够扎实的时候，也就会看什么都豁然开朗了。</p><blockquote><p>个人博客：<a href="https://moonshinean.github.io/" target="_blank" rel="noopener">https://moonshinean.github.io/</a><br>欢迎来访，希望大家一起加油一起努力，奔赴自己的目标。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据类型 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript揭秘之原型和原型链</title>
      <link href="/2021/01/27/javascript/javascript-jie-mi-zhi-yuan-xing-he-yuan-xing-lian/"/>
      <url>/2021/01/27/javascript/javascript-jie-mi-zhi-yuan-xing-he-yuan-xing-lian/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一名前端从业者，如果理不清JavaScript原型和原型链都显得不够专业，毕竟这是原生JavaScript的重难点和面试必考点，那么到底原型和原型链到底是什么呢？下面我们一起来谈谈吧。</p><blockquote><p>开始之前我们先思考一下什么是原型链？究竟有什么特别之处呢？下面我分别为大家揭开它神秘的面纱</p></blockquote><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>首先我们看一段代码</p><pre><code> function Animal(){} let dog = new Animal(); dog.name = &#39;black&#39; console.log(dog.name) // &#39;black&#39;</code></pre><p>在这个代码中，我们创建了一个Animal的构造函数，然后通过构造函数new出来一个dog实例，那么此时的dog就是Animal的实例对象。</p><blockquote><p>下面我们引入一个新的朋友：<strong>prototype</strong></p></blockquote><p>prototype是每一个函数都有的属性，它的作用是指向自己的原型，比如：</p><blockquote><p>上面的Animal构造函数，它有一个 prototype 属性，这个属性就是指向的它原型对象。<br>所以 Animial的原型就是 Animial.prototype</p></blockquote><p>我们可以用一张图表示构造函数和实例原型之间的关系：</p><p><img src="https://imgkr2.cn-bj.ufileos.com/e1fc6917-1168-430b-baa2-44b9db91284e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=%252FgT7YQeTGMlzlTGrl15uDZrpWiQ%253D&Expires=1614339842" alt></p><p>既然Animial构造函数的原型 是 Animial.prototype，那它的实例dog的原型又是谁呢？</p><blockquote><p>同样是： Animial.prototype, 可能你会好奇，暂时卖个关子，我们继续向下看，后面会一一给大家阐述为什么</p></blockquote><p>我们看下一段代码</p><pre><code>function Person(){}// 此处我们用prototype属性在Person原型上创建一个属性name，值为AnnyPerson.prototype.name = &#39;Anny&#39;// 然后我们实例化一个personlet person = new Person()console.log(person.name) // &#39;Anny&#39;// 此时可以看出，我们并未在实例上定义name这个属性，为啥访问persone.name可以打印出原型的name属性值呢？我们测试一下：// 我们给person这个实例定义一个name属性，值为Samperson.name = &#39;Sam&#39;; console.log(person.name) // &#39;Sam&#39; 此时我们打印的值为Sam// 我们在删除person.name属性delete person.nameconsole.log(person.name) // &#39;Anny&#39; 此时值又成了 Anny了通过上面的例子 我们发现，当实例中没有一个属性的时候，它就会从构造函数的 Person.prototype 原型中去寻找这个属性，然后将其的信息展示出来。</code></pre><blockquote><p>从上面的例子看出，实例和构造函数拥有同一个原型 他们都是 Person.prototype</p></blockquote><p>那么什么是<strong>原型</strong>呢？你可以这样理解：每一个JavaScript对象(null除外)在创建的时候就会与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性</p><blockquote><p>下面我们引入另一个新的朋友：<strong>__ proto __</strong></p></blockquote><p>这是每一个JavaScript对象(除了 null )都具有的一个属性，叫<strong>proto</strong>，这个属性会指向该对象的原型。</p><p>那么有了 <strong>__ proto __</strong> ，我们就知道我们实例的原型了,我们看下一段代码</p><pre><code>  function Person(){}  let person = new Person()  // 我们通过 __proto__来指向person和Person的原型是不是同一个  console.log(person.__proto__ == Person.prototype) // true  // 由此可以看出，上面的说法是对的，person和Person的原型指向同一个，Person.prototype</code></pre><p>得到以下关系图：</p><p><img src="https://static01.imgkr.com/temp/58d7a4c1195a49aba1a306828e7acd8e.png" alt></p><p>既然实例对象和构造函数都可以指向原型，那么原型是否有属性指向构造函数或者实例呢？</p><blockquote><p>指向实例倒是没有，因为一个构造函数可以生成多个实例，但是原型指向构造函数倒是有的，这就要讲到另一个属性：constructor，每个原型都有一个 constructor 属性指向关联的构造函数。</p></blockquote><pre><code>function Person(){}console.log(Person === Person.prototype.constructor) // true// Person.prototype 代表原型，Person.prototype.constructor代表原型的构造函数，所以上面的值为true</code></pre><p>所以我们得到以下关系图</p><p><img src="https://static01.imgkr.com/temp/591bf50b291946378d3f584d414cd479.png" alt></p><p>上面我们说到，实例读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，那如果原型上也没有呢？那它会一直找，找原型的原型，一直找到最顶层为止。</p><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><p>在前面，我们已经说了，原型也是一个对象，既然是对象，那我们的原型的原型是不是Object的原型呢?下面我们看以下代码:</p><pre><code>// 我们在Object的原型上定义一个name叫&#39;Kangknag&#39;Object.prototype.name = &#39;kangkang&#39;// 定义一个Person构造函数function Person(){}// 在Person的原型上定义一个属性name 为 &#39;Sam&#39;Person.prototype.name = &#39;Sam&#39;;// 此时我们创建一个实例let person = new Person() // 此处大家都知道，如果实例上没有name属性，回去它的原型上找，所以此处打印的是Samconsole.log(person.name) // &#39;Sam&#39; // 此时我们删除Person上的属性name delete Person.prototype.name console.log(person.name) // &#39;KangKang&#39; // 此时我们发现，当删除了构造函数Person的属性name后，我们在打印实例的值变成了&#39;KangKang&#39;，上面说道，实例的属性如果没有就会去原型上面找，如果原型上找不到就会去原型的原型上面去找，那此处的Person的原型就是Object.prototype，我们可以验证一下 console.log(person.__proto__.__proto__ == Object.prototype) // true // 可以看出 person原型的原型就是Object.prototype</code></pre><p>所以我们得到以下关系图</p><p><img src="https://imgkr2.cn-bj.ufileos.com/f5fa8f4a-cfba-4f0d-8412-11a5bf599d59.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=sQU4vaF%252BOc%252FPR71zDyIvQqtjDmA%253D&Expires=1614391361" alt></p><p>person原型的原型就是Object.prototype，那么我们的Object.prototype的原型又是什么呢？<br>我们可以打印看一下：</p><pre><code> console.log(Object.prototype.__proto__) // null</code></pre><p>那么null究竟代表了什么呢？，此处引用阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">《undefined与null的区别》</a>一文的说法：<br><img src="https://static01.imgkr.com/temp/ea444fa2889145b490ca92cd35f080c9.png" alt></p><blockquote><p>null 表示”没有对象”, 即该处不应该有值。</p></blockquote><p>所以Object.prototype.__proto __ 的值为null跟Object.prototype没有原型其实表达了一个意思。null就是原型链的终点，所以一般查找到Object.prototype就可以停止查找了</p><p>此时我们可以得到一个关系</p><blockquote><p>person.__proto __ . __proto __ . __proto __ =  null;</p></blockquote><p>那么什么我们就可以得出结论：</p><blockquote><p>原型链：原型链就是从实例通过__proto __逐层向上链接原型形成的链条，叫做原型链。</p></blockquote><p>所以我们可以得到以下关系图<br><img src="https://static01.imgkr.com/temp/55c06ded7cf7404c8d096757779a0d64.png" alt></p><p>以上图中蓝色的箭头就是原型链。</p><blockquote><p>大家都知道，其实原型链是JavaScript继承的核心，但是JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些。</p></blockquote><blockquote><p>此处需要注意两个点：</p></blockquote><ul><li>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性。</li></ul><pre><code>person.constructor === Person.prototype.constructor // true</code></pre><ul><li>其次是 <strong>proto</strong> ，绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter/setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)</li></ul><blockquote><p>那么 new 一个构造函数到底是做了什么操作呢？</p></blockquote><p>new操作符新建了一个空对象，这个对象原型指向构造函数的prototype，执行构造函数后返回这个对象</p><ul><li>创建一个空的对象</li><li>链接到原型</li><li>绑定this指向，执行构造函数</li><li>确保返回的是对象</li></ul><h3 id="文章最后"><a href="#文章最后" class="headerlink" title="文章最后"></a>文章最后</h3><p>通过以上的知识梳理，是不是对原型和原型链有了更深的理解呢？是不是发现所谓的模棱两可的知识理解起来也不是那么难？对的，其实就是这样，只要知道它们的关系，发现原型链也不过如此。此文带有个人见解，如有错误还请大家指出，我及时更正。大家一起努力，加油。</p><blockquote><p>我的博客：<a href="https://moonshinean.github.io/" target="_blank" rel="noopener">https://moonshinean.github.io/</a></p></blockquote><p>文章借鉴：<br><a href="https://github.com/mqyqingfeng/Blog/issues/2" target="_blank" rel="noopener">https://github.com/mqyqingfeng/Blog/issues/2</a><br><a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 原型 </tag>
            
            <tag> prototyoe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中this指向探索</title>
      <link href="/2021/01/27/javascript/this-de-zhi-xiang-tan-suo/"/>
      <url>/2021/01/27/javascript/this-de-zhi-xiang-tan-suo/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h3 id="一、普通函数调用"><a href="#一、普通函数调用" class="headerlink" title="一、普通函数调用"></a>一、普通函数调用</h3><p>1、使用let定义</p><pre><code>// 普通函数调用let username = &quot;hello world&quot;function test(){  console.log(this.username)}</code></pre><blockquote><p>使用node运行，输出的结果是: undefined。</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8b1f5477c2954fd38efb32cb4baf9ecb~tplv-k3u1fbpfcp-zoom-1.image" alt></p><blockquote><p>使用html在谷歌浏览器中运行结果，输出的也是：undefined</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/703a3ee5807a4f749526a8096593fedf~tplv-k3u1fbpfcp-zoom-1.image" alt></p><blockquote><p>总结：使用let定义全局的变量在函数内使用this指向为undefined</p></blockquote><p>2、使用var定义</p><pre><code>// 普通函数调用(使用var定义)var username = &quot;hello world&quot;function test(){   console.log(this.username)}test();</code></pre><blockquote><p>使用node运行，输出的结果是：undefine</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c5be17839641405091cb93deca9ceb4d~tplv-k3u1fbpfcp-zoom-1.image" alt></p><blockquote><p>使用谷歌浏览器中运行的结果是：”hello world”</p></blockquote><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4d7835ef5d814b6c9dab34663c4483fe~tplv-k3u1fbpfcp-zoom-1.image" alt></p><blockquote><p>ps: 大家会发现在node运行环境和浏览器运行环境下，this的指向不太相同；这是因为在node环境下 this指向的是全局global对象，在浏览器环境下this指向的是window对象。</p></blockquote><blockquote><p>猜想：此处在浏览器环境下，var定义的全局变量会被window管控？而let定义的变量不会被window掌控。</p></blockquote><p>验证：</p><p>1)、使用var 定义全局变量，在函数中打印window对象,如果在window对象中能找到定义的全局变量，就表示定义的全局变量被window接管了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a9d271b212e44103acbeb495b49ebd46~tplv-k3u1fbpfcp-zoom-1.image" alt><br>此时我们打印发现，window对象有很多属性，我们搜索一下刚才定义的username全局变量</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c481a0d161cb43b08f036b1d02daf508~tplv-k3u1fbpfcp-zoom-1.image" alt><br>在全局属性中找到了username这个全局变量，表示我们的username这个全局变量被window接管了。既然window接管了username这个全局变量，那么我们就可以通过window.username打印该属性参数。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ecee224a32ca47018ecca29553ab9162~tplv-k3u1fbpfcp-zoom-1.image" alt><br>那么this指向window,window接管了属性username，那么var定义的全局属性就可以通过this来获取了。</p><p>2）、同理：我们使用let来定义一个变量，打印window对象，看看数据是否被window接管。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7b00731e9c5943daab2c922055ab5cbc~tplv-k3u1fbpfcp-zoom-1.image" alt><br>搜索发现，username属性不存在于window对象中，原来，var定义的“全局“变量会被window接管，而let定义的变量不会。</p><blockquote><p>注意：此处var是定义的全局变量，才会被接管（局部变量是不会被window对象接管的），跟作用域有关系。</p></blockquote><blockquote><p>我们都知道let ES6引入新的定义方式，它的用法类似于var，但是申明的变量，只在let命令所在的代码块内有效，也就是说它的作用域是有范围的，是块级作用域，不会指向全局作用域，所以不会被window接管，而且会有暂时性死区的约束。</p></blockquote><blockquote><p>**暂时性死区：指的是只要块级作用域内存在let命令，它所声明的变量就绑定了这个区域，不在受外部影响。</p></blockquote><blockquote><p>结论：在浏览器环境下只有var定义的作用域为全局的变量才会被window接管，let定义的块级作用域或者var定义的局部变量都不会被window接管。普通函数中，因为this指向的是window对象，所以this可以获取到被window接管的全局变量。在node环境中，this指向的是全局global对象，var或者let定义的变量是不会被global对象接管,所以this获取不到定义的属性值。</p></blockquote><p>ps: node环境下，需要使用global挂载属性，才能使用this打印出来。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d813fa9ae4824a54885e19dc0c88508e~tplv-k3u1fbpfcp-zoom-1.image" alt></p><h3 id="二、对象函数的调用"><a href="#二、对象函数的调用" class="headerlink" title="二、对象函数的调用"></a>二、对象函数的调用</h3><pre><code>// 对象函数调用let str = &#39;hello world&#39;let obj = {    id: 123,    test: function(){        console.log(this.str);        console.log(this.id)    }}obj.test();</code></pre><p>运行结果如下：<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/894862f0cec245318184ae61f846cb1d~tplv-k3u1fbpfcp-zoom-1.image" alt><br>打印this看一下<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f5dbb1bc5a99484b90e1e0fd75784bad~tplv-k3u1fbpfcp-zoom-1.image" alt></p><p>从图中不难看出，this指向的是该obj对象，所以上面的this.str为undefined。因为定义的str不属于obj对象的属性，所以this不能拿到指定的属性值。</p><hr><p><strong><em>以下情况需要注意</em></strong></p><pre><code>let str = &#39;hello world&#39;let obj = {    id: 111,}let obj1 = {    id: 123,    test: function(){        console.log(this.id);    }}obj.test = obj1.test;obj.test();</code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ff998260495e4de5864c5da9d2f613d5~tplv-k3u1fbpfcp-zoom-1.image" alt><br>其实不难看出，因为obj1将函数赋值给了obj，那么对象obj就有了test函数，此时调用obj的test函数，this应该指向的是obj，那么this.id就是obj的属性id值，所以为111。</p><blockquote><p>结论: 对象函数调用中，那个对象的函数调用this，this就指向那个对象。</p></blockquote><h3 id="三、构造函数调用"><a href="#三、构造函数调用" class="headerlink" title="三、构造函数调用"></a>三、构造函数调用</h3><pre><code>let constructorClass = function(name,age){    this.name = name;    this.age = age;}let obj1 = new constructorClass(&#39;张三&#39;, 18)console.log(obj1);</code></pre><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bbc58558cc1842008e62236ffd061762~tplv-k3u1fbpfcp-zoom-1.image" alt><br>此处的this指的是当前的构造函数的对象。</p><p><strong><em>注意：在构造函数里面返回一个对象，会直接返回这个对象，而不是指向构造函数后面创造的对象</em></strong><br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd189415cf144a3881eeba5f01b6139d~tplv-k3u1fbpfcp-zoom-1.image" alt></p><blockquote><p>在构造函数里面使用的this 指向的是当前对象</p></blockquote><h3 id="四、apply和call调用"><a href="#四、apply和call调用" class="headerlink" title="四、apply和call调用"></a>四、apply和call调用</h3><p>1、apply和call 会改变传入函数的this指向。</p><pre><code>let obj1 ={    name: &#39;张三&#39;}let obj2 = {    name: &#39;李四&#39;,    test: function(){        console.log(this.name);    }}obj2.test.call(obj1);</code></pre><p><img src="https://imgkr2.cn-bj.ufileos.com/674cbadc-e2d6-49b3-9d6b-760a74502f7a.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=fcPwLJE%252FRkjT0ngxUL%252FPfh9uIEo%253D&Expires=1609473050" alt><br>此时虽然是使用了obj2的方法，打印本来this是指向obj2的，但是使用了call动态的把this指向了obj1，所以此时打印的this.name 就相当于 obj1.name。</p><blockquote><p>call和apply的两个主要用途</p><ul><li>改变this的指向(把this从obj2指向obj1)</li><li>方法借用(obj1没有test方法，只是借用了obj2方法)</li></ul></blockquote><blockquote><p>call 和 apply的区别</p><ul><li>call 和 apply的作用，完全一样，唯一的区别就是在参数上面。</li><li>call 接收的参数不固定，第一个参数是函数体内this的指向，第二个参数以下是传入的参数。</li><li>apply接收两个参数，第一个参数也是函数体内的this指向，第二个参数是一个集合对象(数组或者类数组)</li></ul></blockquote><blockquote><p>bind和call、apply 一样，也是改变this指向的，他的传参方式和call一样，但是它返回的是一个函数，用于后面调用，而apply和call会直接执行。</p></blockquote><h3 id="五、箭头函数"><a href="#五、箭头函数" class="headerlink" title="五、箭头函数"></a>五、箭头函数</h3><blockquote><p>箭头函数：</p><ul><li>出现的作用除了让函数的书写变得很简洁，可读性很好外；最大的优点是解决了this执行环境所造成的一些问题。比如：解决了匿名函数this指向的问题（匿名函数的执行环境具有全局性），包括setTimeout和setInterval中使用this所造成的问题。</li><li>箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。<pre><code>let obj = {  str: &#39;hello&#39;,  test: function(){      setTimeout(function(){          console.log(this.str);      })  }}obj.test();</code></pre></li></ul></blockquote><p><img src="https://imgkr2.cn-bj.ufileos.com/ca2b6790-ca91-44dd-a89f-7abbbf49cbe0.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=g%252B1ChG4lHePautdBPZvIBkMCrA0%253D&Expires=1609475712" alt><br>从前面演示的结果发现，在test函数中的this指向的是obj，但是传给setTimeout的是普通函数，this指向的是全局 window，window是没有改对象的str属性的，所以为undifined。</p><p><img src="https://imgkr2.cn-bj.ufileos.com/63c275f7-78f1-4c9a-909e-600d294d9e9e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lEi6AqesYY9Gsl8%252FFxV8BryrwOQ%253D&Expires=1609475924" alt><br>此时将setTimeout的普通函数改成箭头函数，然后箭头函数的this继承于外部的环境，也就是test函数的this指向，所以，test函数的this指向是obj，则setTimeout的箭头函数的this也是指向obj，所以可以找到str属性，输出hello。</p><blockquote><p>结论：箭头函数里面，没有this,箭头函数里面的this是继承于外面的环境。</p></blockquote><blockquote><p>以上属于个人愚见，文章有不对的地方希望大家指出，共同改进，共同学习。</p></blockquote><p>文章借鉴参考：<br><a href="https://www.cnblogs.com/chengxs/p/8679313.html" target="_blank" rel="noopener">https://www.cnblogs.com/chengxs/p/8679313.html</a>,<br><a href="https://blog.csdn.net/qq_41485414/article/details/81481519" target="_blank" rel="noopener">https://blog.csdn.net/qq_41485414/article/details/81481519</a>,<br><a href="https://www.cnblogs.com/fly_dragon/p/8669057.html" target="_blank" rel="noopener">https://www.cnblogs.com/fly_dragon/p/8669057.html</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm发布组件库的流程</title>
      <link href="/2021/01/26/npm/npm-fa-bu-zu-jian-ku-de-liu-cheng/"/>
      <url>/2021/01/26/npm/npm-fa-bu-zu-jian-ku-de-liu-cheng/</url>
      
        <content type="html"><![CDATA[<p>1、首先去npm官网注册自己的账号密码<br>2、在项目文件夹中打开命令行  输入 npm login命令，然后输入用户名密码邮箱登录<br>3、成功后，输入npm publish发布(此处应保证为npm原始镜像，并非淘宝镜像) </p><ul><li>全局配置切换到淘宝源<pre><code> npm config set registry https://registry.npm.taobao.org</code></pre></li><li>全局配置切换到官方源<pre><code>npm config set registry http://www.npmjs.org</code></pre><blockquote><p>注意： 如果是淘宝镜像，则需要切换为npm原始镜像，然后重新登录。不然回报(404 错误，提示不在注册表的错误信息)</p></blockquote></li></ul><pre><code>撤销或者删除某个包 npm unpublish --force an_util@1.0.1 --force 表示强制删除</code></pre>]]></content>
      
      
      <categories>
          
          <category> npm服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm私有服务器搭建</title>
      <link href="/2021/01/25/npm/npm-si-you-fu-wu-qi-da-jian/"/>
      <url>/2021/01/25/npm/npm-si-you-fu-wu-qi-da-jian/</url>
      
        <content type="html"><![CDATA[<h3 id="一、搭建npm私有服务器"><a href="#一、搭建npm私有服务器" class="headerlink" title="一、搭建npm私有服务器"></a>一、搭建npm私有服务器</h3><p>1、首先安装 Node,然后输入以下命令，安装 verdaccio，</p><pre><code>    npm install -g verdaccio</code></pre><p>2、如果在安装过程中报 grywarn 的权限错的话，那么需要加上 –unsafe-perm, 如下命令</p><pre><code>    npm install -g verdaccio --unsafe-perm</code></pre><p>3、在命令行中输入 verdaccio 命令回车, 如下图:</p><ul><li><p>(1)、config file 表示配置文件所在的位置</p><p><img src="https://static01.imgkr.com/temp/a1fe5b2609de42f6a203a91992289b64.png" alt></p></li><li><blockquote><p>http address 表示运行的地址</p></blockquote></li></ul><p>4、打开上图显示的 <a href="http://localhost:4873" target="_blank" rel="noopener">http://localhost:4873</a> 地址，显示以下页面表示安装成功</p><p><img src="https://imgkr2.cn-bj.ufileos.com/18ad683c-83b1-42e9-860a-f61661053a6e.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=UrTxP2i%252BIh6mAf7uukjBocu5ATM%253D&Expires=1611726293" alt></p><p>5、找到以上第三步显示的配置文件地址，修改配置文件，末尾新增 listen: 0.0.0.0:4873 ，通过访问本机 ip 地址访问。</p><blockquote><p>如下是新增的，默认是没有的，只能在本机访问，添加完成后就可以在外网访问了~<br>      listen: 0.0.0.0:4873</p></blockquote><p>6、下载 nrm 管理 npm 镜像地址。</p><ul><li>(1)、安装命令：npm install -g nrm<br>想要了解更多有关的 nrm 命令，可以使用 nrm –help, 会列出所有的命令行的</li><li>(2)、添加私有镜像，设置别名（此处地址为我本地搭建地址，此处可以修改为自己的服务器地址）</li></ul><blockquote><p>nrm add  verdaccio（此名字可自定义）<a href="http://192.168.6.98:4873" target="_blank" rel="noopener">http://192.168.6.98:4873</a></p></blockquote><ul><li>(3)、nrm 查看全部镜像</li></ul><pre><code>  nrm  ls</code></pre><p><img src="https://imgkr2.cn-bj.ufileos.com/f7fb7dd7-3d96-4d4d-bcf4-a3032b570dc7.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=n3s%252BlN42GFr6dGIKdvR%252Bpz0cxA0%253D&Expires=1611726454" alt><br>此处最后一项是我添加的私有镜像。</p><ul><li>(4)、切换镜像<br>nrm use  镜像名称(verdaccio)<br>如果不想使用私有 npm 上下载包的话，可以使用 nrm use xxx 命令，切换镜像</li></ul><p>7、npm 发布包<br>要在私有 npm 仓库中发布包首先需要注册或者登陆账号。如果我们还没有账号的话，通过输入命令 npm adduser，然后依次输入用户名，密码即可创建完毕，如果已有账号，通过 npm login，依次输入用户名密码即可登陆。然后进入我们需要上传的代码目录，执行发布命令即可</p><blockquote><p>如果出现以下错误日志可以先忽略<br><img src="https://imgkr2.cn-bj.ufileos.com/1e8be315-df95-4207-bd38-1185955cf993.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=cbfzcQNQnwY7pWwqAyY%252FUVMND5o%253D&Expires=1611726576" alt></p></blockquote><p>输入用户名、 密码、邮箱  ，出现登录再某某地址表示登录成功<br><img src="https://imgkr2.cn-bj.ufileos.com/555471a5-5506-4415-a5e3-ea359d4f4823.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=C6IXiwMnd44tuRs94jON93WxpU4%253D&Expires=1611726595" alt><br>8、进入需要组件库项目中，输入以下命令 上传组件库到私有服务器中</p><pre><code> npm publish --registry http://192.168.6.98:4873</code></pre><p><img src="https://imgkr2.cn-bj.ufileos.com/c517471c-e14b-4419-a333-66292b23e442.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=lDOe1kbLBpTSEkZywEOYWzPoJCc%253D&Expires=1611726954" alt></p><p><img src="https://static01.imgkr.com/temp/69b55129fb9c4bc3beb80a81807bc4d5.png" alt><br>上传成功后 ，进入刚才启动的cerdaccio服务，刷新页面。看到以下组件库名称，表示上传成功。</p><p><img src="https://static01.imgkr.com/temp/5d263d0dbf1b41fca110e3e9dce1787c.png" alt><br>这样私有组件库就算搭建成功了。</p><h3 id="二、私有服务器的组件下载使用"><a href="#二、私有服务器的组件下载使用" class="headerlink" title="二、私有服务器的组件下载使用"></a>二、私有服务器的组件下载使用</h3><p>1、首先根据上面的nrm use 命令 切换npm 为私有组件库源镜像。</p><p>2、 创建一个vue 项目</p><pre><code>   使用 npm install -s test_ui  </code></pre><p><img src="https://static01.imgkr.com/temp/2e35d790c65b452e9f58dbdc2af1dadc.png" alt></p><blockquote><p>注意：此处的 test_ui 为上面上传到私有组件库服务的组件库名称</p></blockquote><p>3、在main.js里面导入使用组件库</p><p><img src="https://imgkr2.cn-bj.ufileos.com/2c81eaa1-9604-470a-b0c7-ec630e033fac.png?UCloudPublicKey=TOKEN_8d8b72be-579a-4e83-bfd0-5f6ce1546f13&Signature=DmyNjO7zkbz0gZUen4mOxWx%252BVsQ%253D&Expires=1611727080" alt></p><p>4、成功后 在组件中引用message组件</p><p><img src="https://static01.imgkr.com/temp/cbcf0191f01e4ba088c3ea0cafe28f68.png" alt></p><p>5、npm run start 启动项目，出现以下字样表示引用成功。</p><p><img src="https://static01.imgkr.com/temp/2558b4a84ba146eebfe82a5d87202dee.png" alt></p><p>这样组件库使用成功咯，是不是非常的简单~~</p><blockquote><p>本文适用于部分中小型公司搭建自己前端的生态体系的私有服务器，可以自己搭建，也可以直接去npm上购买私服，此方法只是其中一种，还有很多方式可以搭建私有npm组件库，仅供大家参考，有疑问随时与我联系，大家一起学习一起成长。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> npm服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
